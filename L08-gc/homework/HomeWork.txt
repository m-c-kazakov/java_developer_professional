Домашнее задание
Определение нужного размера хипа

Цель:
на примере простого приложения понять какое влияние оказывают сборщики мусора

Описание/Пошаговая инструкция выполнения домашнего задания:
Есть готовое приложение (модуль homework)
Запустите его с размером хипа 256 Мб и посмотрите в логе время выполнения.
Как задать размер хипа?
-Xms256m - установка начального размера кучи
-Xmx256m - установка максимального размера кучи

Пример вывода:
spend msec:18284, sec:18
Увеличьте размер хипа до 2Гб, замерьте время выполнения.

Результаты запусков записывайте в таблицу.
Результат:
256mb  - OutOfMemoryError
512mb  - spend msec:8596, sec:8
1024mb - spend msec:7808, sec:7
2048mb - spend msec:7111, sec:7
4096mb - spend msec:6821, sec:6
6294mb - spend msec:7154, sec:7
8192mb - spend msec:7411, sec:7


Определите оптимальный размер хипа, т.е. размер, превышение которого,
не приводит к сокращению времени выполнения приложения.
Оптимальный размер хипа: 4096mb - spend msec:6821, sec:6

Оптимизируйте работу приложения.
1) В Summator поменял Integer на int -> spend msec:1850, sec:1 ->  Почему быстрее? Нет лишних обращений к heap за получением значений.
2) Вернул поля Summator на Integer заменил  fori на Stream.iterate -> spend msec:927, sec:0 -> Почему быстрее? fori менее оптимизирован(???)
3) Использование 2 верхних варианта сразу -> spend msec:371, sec:0

Т.е. не меняя логики работы (но изменяя код), сделайте так, чтобы приложение работало быстро с минимальным хипом.
Повторите измерения времени выполнения программы для тех же значений размера хипа.'
1024mb - spend msec:344, sec:0
1536mb - spend msec:341, sec:0
2048mb - spend msec:338, sec:0 - Оптимальный размер
3072mb - spend msec:358, sec:0
4096mb - spend msec:371, sec:0


Домашнее задание
Написать приложение, которое следит за сборками мусора и пишет в лог количество сборок
каждого типа(young, old) и время которое ушло на сборки в минуту.
Добиться OutOfMemory в этом приложении через медленное подтекание по памяти
(например, добавлять элементы в List и удалять только половину).
Настроить приложение (можно добавлять Thread.sleep(...)) так чтобы оно падало
с OOM примерно через 5 минут после начала работы.
Собрать статистику (количество сборок, время на сборки) по разным GC.


-verbose:gc -Xlog:gc*:file=./logs/gc_pid_%p.log -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=./logs/dump