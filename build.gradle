plugins {
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.github.johnrengelman.shadow' version '7.1.2' apply false //  нужен для указания версии плагина дочерним проектам
}

idea {
    project {
        languageLevel = 17
    }
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

allprojects {
    group 'org.example'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    apply plugin: "io.spring.dependency-management"
    dependencyManagement {
        dependencies {
            imports {
                mavenBom("org.springframework.boot:spring-boot-dependencies:2.6.4")
            }
            dependency("com.google.guava:guava:${Versions.guava}")
            dependency("org.openjdk.jmh:jmh-core:${Versions.jmh}")
            dependency("org.openjdk.jmh:jmh-generator-annprocess:${Versions.jmh}")
            dependency("org.openjdk.jol:jol-core:${Versions.jol}")
            dependency("org.ow2.asm:asm-commons:${Versions.asm}")
            dependency("org.glassfish:javax.json:${Versions.glassfishJson}")
            dependency("com.google.protobuf:protobuf-java-util:${Versions.protobuf}")

            dependency("org.testcontainers:junit-jupiter:${Versions.testcontainers}")
            dependency("org.testcontainers:postgresql:${Versions.testcontainers}")

            dependency("org.projectlombok:lombok:${Versions.lombok}")
            dependency("com.google.code.gson:gson:${Versions.gson}")
            dependency("com.datastax.oss:java-driver-core:${Versions.cassandra}")

            dependency ("org.mongodb:mongodb-driver-core:${Versions.mongodb}")
            dependency("org.mongodb:mongodb-driver-sync:${Versions.mongodb}")
            dependency("org.mongodb:bson:${Versions.mongodb}")

            dependency("org.mongodb:mongodb-driver-reactivestreams:${Versions.mongodbReactive}")

            dependency("org.neo4j.driver:neo4j-java-driver:${Versions.neo4j}")

            dependency("redis.clients:jedis:${Versions.jedis}")

            dependency("org.webjars:sockjs-client:${Versions.sockjs}")
            dependency("org.webjars:stomp-websocket:${Versions.stomp}")
            dependency("org.webjars:bootstrap:${Versions.bootstrap}")
            dependency("org.springdoc:springdoc-openapi-ui:${Versions.springDocOpenapiUi}")

            dependency("com.google.code.findbugs:jsr305:${Versions.jsr305}")

            dependency("io.grpc:grpc-netty:${Versions.grpc}")
            dependency("io.grpc:grpc-protobuf:${Versions.grpc}")
            dependency("io.grpc:grpc-stub:${Versions.grpc}")
            dependency("net.java.dev.jna:jna:${Versions.jna}")
        }
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict() // сборка падает в случае появления конфликта между зависимостями
        }
        resolutionStrategy {
            // Явно указать какую версию зависимости взять
            // при появлении конфликта между зависимостями
            force("org.apiguardian:apiguardian-api:1.1.2")
            force("com.google.errorprone:error_prone_annotations:2.11.0")
        }
    }
}

task managedVersions {
    doLast {
        dependencyManagement.managedVersions.each {
            println it
        }
    }
}